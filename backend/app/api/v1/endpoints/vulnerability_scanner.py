"""
Vulnerability Scanner API endpoints
"""
from fastapi import APIRouter, HTTPException, BackgroundTasks
from typing import List, Dict, Any, Optional
from pydantic import BaseModel
from ....services.vulnerability_scanner import get_scanner_service
from ....core.logging import log_scan_event

router = APIRouter()
scanner_service = get_scanner_service()


class ScanConfigRequest(BaseModel):
    target: str
    scanner_type: str = "nmap"
    scan_type: str = "quick"
    options: Optional[Dict[str, Any]] = None


class ScanResponse(BaseModel):
    id: str
    target: str
    scanner_type: str
    scan_type: str
    status: str
    start_time: str
    end_time: Optional[str] = None
    progress: int
    vulnerabilities: List[Dict[str, Any]]
    summary: Dict[str, Any]


@router.post("/", response_model=Dict[str, Any])
async def start_scan(config: ScanConfigRequest):
    """Start a vulnerability scan"""
    try:
        result = await scanner_service.start_scan(config.dict())
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/", response_model=List[ScanResponse])
async def get_all_scans():
    """Get all scan results"""
    try:
        scans = await scanner_service.get_all_scans()
        return scans
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/{scan_id}", response_model=ScanResponse)
async def get_scan_result(scan_id: str):
    """Get specific scan result"""
    try:
        scan = await scanner_service.get_scan_status(scan_id)
        if not scan:
            raise HTTPException(status_code=404, detail="Scan not found")
        return scan
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/{scan_id}/status")
async def get_scan_status(scan_id: str):
    """Get scan status"""
    try:
        scan = await scanner_service.get_scan_status(scan_id)
        if not scan:
            raise HTTPException(status_code=404, detail="Scan not found")
        
        return {
            "scan_id": scan_id,
            "status": scan.get("status"),
            "progress": scan.get("progress", 0),
            "status_message": scan.get("status_message", ""),
            "vulnerabilities_found": len(scan.get("vulnerabilities", [])),
            "start_time": scan.get("start_time"),
            "end_time": scan.get("end_time")
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/{scan_id}/cancel")
async def cancel_scan(scan_id: str):
    """Cancel a running scan"""
    try:
        success = await scanner_service.cancel_scan(scan_id)
        if not success:
            raise HTTPException(status_code=404, detail="Scan not found or not running")
        
        return {"status": "cancelled", "scan_id": scan_id}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/scanners/status")
async def get_scanner_status():
    """Get status of all scanners"""
    try:
        status = scanner_service.get_scanner_status()
        return status
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/quick-scan")
async def quick_scan(target: str, scanner_type: str = "nmap"):
    """Start a quick vulnerability scan"""
    try:
        config = {
            "target": target,
            "scanner_type": scanner_type,
            "scan_type": "quick"
        }
        
        result = await scanner_service.start_scan(config)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/comprehensive-scan")
async def comprehensive_scan(target: str, scanner_type: str = "nmap"):
    """Start a comprehensive vulnerability scan"""
    try:
        config = {
            "target": target,
            "scanner_type": scanner_type,
            "scan_type": "comprehensive"
        }
        
        result = await scanner_service.start_scan(config)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/results/summary")
async def get_scan_summary():
    """Get summary of all scan results"""
    try:
        all_scans = await scanner_service.get_all_scans()
        
        total_scans = len(all_scans)
        completed_scans = len([s for s in all_scans if s.get("status") == "completed"])
        running_scans = len([s for s in all_scans if s.get("status") == "running"])
        failed_scans = len([s for s in all_scans if s.get("status") == "failed"])
        
        # Aggregate vulnerability counts
        total_vulnerabilities = 0
        severity_counts = {"Critical": 0, "High": 0, "Medium": 0, "Low": 0}
        
        for scan in all_scans:
            if scan.get("status") == "completed":
                vulnerabilities = scan.get("vulnerabilities", [])
                total_vulnerabilities += len(vulnerabilities)
                
                for vuln in vulnerabilities:
                    severity = vuln.get("severity", "Unknown")
                    if severity in severity_counts:
                        severity_counts[severity] += 1
        
        return {
            "total_scans": total_scans,
            "completed_scans": completed_scans,
            "running_scans": running_scans,
            "failed_scans": failed_scans,
            "total_vulnerabilities": total_vulnerabilities,
            "severity_distribution": severity_counts,
            "scanner_usage": {
                "nmap": len([s for s in all_scans if s.get("scanner_type") == "nmap"]),
                "openvas": len([s for s in all_scans if s.get("scanner_type") == "openvas"]),
                "nessus": len([s for s in all_scans if s.get("scanner_type") == "nessus"]),
                "osquery": len([s for s in all_scans if s.get("scanner_type") == "osquery"])
            }
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.delete("/{scan_id}")
async def delete_scan(scan_id: str):
    """Delete a scan result"""
    try:
        success = scanner_service.db.delete("scan_results", scan_id)
        if not success:
            raise HTTPException(status_code=404, detail="Scan not found")
        
        # Remove from active scans if present
        if scan_id in scanner_service.active_scans:
            del scanner_service.active_scans[scan_id]
        
        return {"status": "deleted", "scan_id": scan_id}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e)) 