import React, { useState, useEffect } from 'react';
import { Shield, AlertTriangle, CheckCircle, Code, Terminal, FileText, ExternalLink, RefreshCw, Zap, Target, Eye, Book } from 'lucide-react';
import { vulnAPI } from '../services/api';

interface VulnerabilityData {
  id: string;
  event_type: string;
  severity: string;
  description: string;
  payload?: string;
  source_ip?: string;
  created_at: string;
  cve_id?: string;
  exploit_success: boolean;
}

interface Solution {
  id: string;
  title: string;
  description: string;
  severity: string;
  steps: string[];
  code_examples?: string[];
  references?: string[];
  priority: number;
  estimated_time: string;
  difficulty: 'Easy' | 'Medium' | 'Hard';
  vulnerability_types: string[];
}

const VulnerabilitySolutions: React.FC = () => {
  const [vulnerabilities, setVulnerabilities] = useState<VulnerabilityData[]>([]);
  const [solutions, setSolutions] = useState<Solution[]>([]);
  const [selectedSolution, setSelectedSolution] = useState<Solution | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [filter, setFilter] = useState('all');

  useEffect(() => {
    loadVulnerabilities();
    const interval = setInterval(loadVulnerabilities, 5000); // Refresh every 5 seconds
    return () => clearInterval(interval);
  }, []);

  const loadVulnerabilities = async () => {
    try {
      setIsLoading(true);
      const data = await vulnAPI.getVulnerabilities();
      if (data && data.vulnerabilities) {
        setVulnerabilities(data.vulnerabilities);
        generateSolutions(data.vulnerabilities);
      }
    } catch (error) {
      console.error('Error loading vulnerabilities:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const generateSolutions = (vulns: VulnerabilityData[]) => {
    const solutionMap = new Map<string, Solution>();
    
    vulns.forEach(vuln => {
      const eventType = vuln.event_type;
      let solution: Solution;
      
      switch (eventType) {
        case 'SQL_INJECTION_ATTEMPT':
        case 'SQL_INJECTION_LOGIN_ATTEMPT':
          solution = {
            id: 'sql-injection-fix',
            title: 'Fix SQL Injection Vulnerabilities',
            description: 'Implement parameterized queries and input validation to prevent SQL injection attacks.',
            severity: 'Critical',
            steps: [
              'Replace string concatenation with parameterized queries',
              'Implement input validation and sanitization',
              'Use prepared statements or ORM frameworks',
              'Apply the principle of least privilege for database access',
              'Enable SQL injection detection in WAF',
              'Regular security code reviews'
            ],
            code_examples: [
              '// BAD - Vulnerable to SQL injection\nconst query = `SELECT * FROM users WHERE username=\'${username}\' AND password=\'${password}\'`;\n\n// GOOD - Using parameterized query\nconst query = \'SELECT * FROM users WHERE username=? AND password=?\';\nconnection.query(query, [username, password], callback);',
              '// Python example with parameterized query\ncursor.execute("SELECT * FROM users WHERE username=%s AND password=%s", (username, password))',
              '// Node.js with proper escaping\nconst query = mysql.format("SELECT * FROM users WHERE username=? AND password=?", [username, password]);'
            ],
            references: [
              'https://owasp.org/www-project-top-ten/2017/A1_2017-Injection',
              'https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html'
            ],
            priority: 1,
            estimated_time: '2-4 hours',
            difficulty: 'Medium',
            vulnerability_types: ['SQL_INJECTION_ATTEMPT', 'SQL_INJECTION_LOGIN_ATTEMPT']
          };
          break;
          
        case 'XSS_ATTEMPT':
          solution = {
            id: 'xss-prevention',
            title: 'Prevent Cross-Site Scripting (XSS)',
            description: 'Implement proper output encoding and Content Security Policy to prevent XSS attacks.',
            severity: 'High',
            steps: [
              'Implement output encoding for all user input',
              'Use Content Security Policy (CSP) headers',
              'Validate and sanitize all user inputs',
              'Use templating engines with auto-escaping',
              'Implement HTTPOnly flags for cookies',
              'Regular security testing for XSS vulnerabilities'
            ],
            code_examples: [
              '// BAD - Direct HTML insertion\nelement.innerHTML = userInput;\n\n// GOOD - Using textContent\nelement.textContent = userInput;\n\n// Or using proper escaping\nelement.innerHTML = escapeHtml(userInput);',
              '// Content Security Policy header\nContent-Security-Policy: default-src \'self\'; script-src \'self\' \'unsafe-inline\'; style-src \'self\' \'unsafe-inline\';',
              '// HTML escaping function\nfunction escapeHtml(text) {\n  return text.replace(/[&<>"\']/g, function(match) {\n    return {\n      \'&\': \'&amp;\',\n      \'<\': \'&lt;\',\n      \'>\': \'&gt;\',\n      \'"\': \'&quot;\',\n      "\'": \'&#39;\'\n    }[match];\n  });\n}'
            ],
            references: [
              'https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)',
              'https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html'
            ],
            priority: 2,
            estimated_time: '1-3 hours',
            difficulty: 'Medium',
            vulnerability_types: ['XSS_ATTEMPT']
          };
          break;
          
        case 'COMMAND_INJECTION_ATTEMPT':
          solution = {
            id: 'command-injection-fix',
            title: 'Fix Command Injection Vulnerabilities',
            description: 'Implement safe alternatives to shell command execution and proper input validation.',
            severity: 'Critical',
            steps: [
              'Avoid executing shell commands with user input',
              'Use safe alternatives and libraries',
              'Implement strict input validation',
              'Use whitelist-based validation',
              'Run commands with minimal privileges',
              'Consider using containerization for isolation'
            ],
            code_examples: [
              '// BAD - Command injection vulnerability\nsubprocess.check_output(f"ping -c 1 {host}", shell=True)\n\n// GOOD - Using safe alternatives\nimport subprocess\nresult = subprocess.run(["ping", "-c", "1", host], capture_output=True, text=True)',
              '// Input validation example\nif (!isValidHostname(host)) {\n  throw new Error("Invalid hostname");\n}\n\nfunction isValidHostname(hostname) {\n  const regex = /^[a-zA-Z0-9.-]+$/;\n  return regex.test(hostname) && hostname.length <= 253;\n}',
              '// Using whitelisted commands\nconst allowedCommands = ["ping", "traceroute", "nslookup"];\nif (!allowedCommands.includes(command)) {\n  throw new Error("Command not allowed");\n}'
            ],
            references: [
              'https://owasp.org/www-project-top-ten/2017/A1_2017-Injection',
              'https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html'
            ],
            priority: 1,
            estimated_time: '2-6 hours',
            difficulty: 'Hard',
            vulnerability_types: ['COMMAND_INJECTION_ATTEMPT']
          };
          break;
          
        case 'INFO_DISCLOSURE_ATTEMPT':
          solution = {
            id: 'info-disclosure-fix',
            title: 'Fix Information Disclosure',
            description: 'Implement proper authentication and remove sensitive data from API responses.',
            severity: 'High',
            steps: [
              'Remove sensitive data from API responses',
              'Implement proper authentication and authorization',
              'Use field-level security',
              'Implement rate limiting',
              'Log and monitor access attempts',
              'Regular security audits of API endpoints'
            ],
            code_examples: [
              '// BAD - Exposing sensitive data\nconst users = await User.findAll();\nres.json({ users });\n\n// GOOD - Filtering sensitive fields\nconst users = await User.findAll({\n  attributes: { exclude: [\'password\', \'salt\', \'resetToken\'] }\n});\nres.json({ users });',
              '// Implement authentication middleware\nconst requireAuth = (req, res, next) => {\n  const token = req.headers.authorization;\n  if (!token || !verifyToken(token)) {\n    return res.status(401).json({ error: \'Unauthorized\' });\n  }\n  next();\n};\n\napp.get(\'/api/users\', requireAuth, getUsersHandler);',
              '// Field-level security example\nconst publicFields = [\'id\', \'username\', \'email\'];\nconst sanitizedUser = Object.keys(user)\n  .filter(key => publicFields.includes(key))\n  .reduce((obj, key) => {\n    obj[key] = user[key];\n    return obj;\n  }, {});'
            ],
            references: [
              'https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure',
              'https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html'
            ],
            priority: 2,
            estimated_time: '1-4 hours',
            difficulty: 'Medium',
            vulnerability_types: ['INFO_DISCLOSURE_ATTEMPT']
          };
          break;
          
        case 'AUTHENTICATION_FAILURE':
          solution = {
            id: 'auth-security-fix',
            title: 'Strengthen Authentication Security',
            description: 'Implement strong password policies, account lockout, and multi-factor authentication.',
            severity: 'Medium',
            steps: [
              'Implement strong password policies',
              'Add account lockout mechanisms',
              'Implement multi-factor authentication',
              'Use secure password hashing',
              'Add login attempt monitoring',
              'Implement session management'
            ],
            code_examples: [
              '// Password hashing with bcrypt\nconst bcrypt = require(\'bcrypt\');\nconst saltRounds = 12;\n\nconst hashPassword = async (password) => {\n  return await bcrypt.hash(password, saltRounds);\n};\n\nconst verifyPassword = async (password, hash) => {\n  return await bcrypt.compare(password, hash);\n};',
              '// Account lockout implementation\nconst MAX_ATTEMPTS = 5;\nconst LOCKOUT_TIME = 15 * 60 * 1000; // 15 minutes\n\nconst checkAccountLockout = (user) => {\n  if (user.failedAttempts >= MAX_ATTEMPTS) {\n    const lockoutExpiry = new Date(user.lastFailedAttempt.getTime() + LOCKOUT_TIME);\n    if (new Date() < lockoutExpiry) {\n      throw new Error(\'Account locked. Try again later.\');\n    }\n  }\n};',
              '// Password strength validation\nconst validatePassword = (password) => {\n  const minLength = 8;\n  const hasUpperCase = /[A-Z]/.test(password);\n  const hasLowerCase = /[a-z]/.test(password);\n  const hasNumbers = /\\d/.test(password);\n  const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(password);\n  \n  return password.length >= minLength && hasUpperCase && hasLowerCase && hasNumbers && hasSpecialChar;\n};'
            ],
            references: [
              'https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication',
              'https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html'
            ],
            priority: 3,
            estimated_time: '2-8 hours',
            difficulty: 'Medium',
            vulnerability_types: ['AUTHENTICATION_FAILURE']
          };
          break;
          
        default:
          solution = {
            id: 'general-security',
            title: 'General Security Improvements',
            description: 'Implement general security best practices and monitoring.',
            severity: 'Medium',
            steps: [
              'Implement comprehensive input validation',
              'Add security headers to all responses',
              'Enable security logging and monitoring',
              'Regular security updates and patches',
              'Implement rate limiting',
              'Use HTTPS for all communications'
            ],
            code_examples: [
              '// Security headers middleware\nconst helmet = require(\'helmet\');\napp.use(helmet());\n\n// Or manually\napp.use((req, res, next) => {\n  res.setHeader(\'X-Content-Type-Options\', \'nosniff\');\n  res.setHeader(\'X-Frame-Options\', \'DENY\');\n  res.setHeader(\'X-XSS-Protection\', \'1; mode=block\');\n  next();\n});',
              '// Rate limiting\nconst rateLimit = require(\'express-rate-limit\');\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: \'Too many requests from this IP\'\n});\napp.use(limiter);',
              '// Input validation middleware\nconst { body, validationResult } = require(\'express-validator\');\n\nconst validateInput = [\n  body(\'username\').isAlphanumeric().withMessage(\'Username must be alphanumeric\'),\n  body(\'email\').isEmail().withMessage(\'Must be a valid email\'),\n  (req, res, next) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n    next();\n  }\n];'
            ],
            references: [
              'https://owasp.org/www-project-top-ten/',
              'https://cheatsheetseries.owasp.org/'
            ],
            priority: 4,
            estimated_time: '1-2 hours',
            difficulty: 'Easy',
            vulnerability_types: [eventType]
          };
      }
      
      solutionMap.set(solution.id, solution);
    });
    
    setSolutions(Array.from(solutionMap.values()).sort((a, b) => a.priority - b.priority));
  };

  const getSeverityColor = (severity: string) => {
    switch (severity?.toLowerCase()) {
      case 'critical': return 'text-red-400 bg-red-900/20';
      case 'high': return 'text-orange-400 bg-orange-900/20';
      case 'medium': return 'text-yellow-400 bg-yellow-900/20';
      case 'low': return 'text-green-400 bg-green-900/20';
      default: return 'text-gray-400 bg-gray-900/20';
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty?.toLowerCase()) {
      case 'easy': return 'text-green-400 bg-green-900/20';
      case 'medium': return 'text-yellow-400 bg-yellow-900/20';
      case 'hard': return 'text-red-400 bg-red-900/20';
      default: return 'text-gray-400 bg-gray-900/20';
    }
  };

  const filteredSolutions = solutions.filter(solution => 
    filter === 'all' || solution.severity.toLowerCase() === filter
  );

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-white">Vulnerability Solutions</h1>
          <p className="text-gray-400">Real-time security recommendations and fixes</p>
        </div>
        <div className="flex items-center space-x-4">
          <button
            onClick={loadVulnerabilities}
            disabled={isLoading}
            className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 px-4 py-2 rounded-lg text-white font-medium transition-colors"
          >
            <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />
            <span>Refresh</span>
          </button>
        </div>
      </div>

      {/* Filter */}
      <div className="bg-gray-800 rounded-lg p-4">
        <div className="flex items-center space-x-4">
          <span className="text-gray-300">Filter by severity:</span>
          <select
            value={filter}
            onChange={(e) => setFilter(e.target.value)}
            className="bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white"
          >
            <option value="all">All Severities</option>
            <option value="critical">Critical</option>
            <option value="high">High</option>
            <option value="medium">Medium</option>
            <option value="low">Low</option>
          </select>
        </div>
      </div>

      {/* Solutions Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {filteredSolutions.map((solution) => (
          <div key={solution.id} className="bg-gray-800 rounded-lg p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center space-x-3">
                <Shield className="w-5 h-5 text-blue-400" />
                <h3 className="text-white font-semibold">{solution.title}</h3>
              </div>
              <div className="flex items-center space-x-2">
                <span className={`px-2 py-1 rounded text-xs font-medium ${getSeverityColor(solution.severity)}`}>
                  {solution.severity}
                </span>
                <span className={`px-2 py-1 rounded text-xs font-medium ${getDifficultyColor(solution.difficulty)}`}>
                  {solution.difficulty}
                </span>
              </div>
            </div>
            
            <p className="text-gray-300 text-sm mb-4">{solution.description}</p>
            
            <div className="grid grid-cols-2 gap-4 mb-4">
              <div>
                <span className="text-gray-400 text-xs">Priority:</span>
                <span className="text-white ml-2">{solution.priority}</span>
              </div>
              <div>
                <span className="text-gray-400 text-xs">Est. Time:</span>
                <span className="text-white ml-2">{solution.estimated_time}</span>
              </div>
            </div>
            
            <div className="space-y-2 mb-4">
              <h4 className="text-white font-medium text-sm">Implementation Steps:</h4>
              <ul className="space-y-1">
                {solution.steps.slice(0, 3).map((step, index) => (
                  <li key={index} className="text-gray-300 text-sm flex items-start">
                    <span className="text-blue-400 mr-2">•</span>
                    {step}
                  </li>
                ))}
                {solution.steps.length > 3 && (
                  <li className="text-gray-400 text-sm">
                    +{solution.steps.length - 3} more steps...
                  </li>
                )}
              </ul>
            </div>
            
            <div className="flex items-center space-x-2">
              <button
                onClick={() => setSelectedSolution(solution)}
                className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded text-white text-sm transition-colors"
              >
                <Eye className="w-4 h-4" />
                <span>View Details</span>
              </button>
              
              {solution.code_examples && (
                <button
                  onClick={() => setSelectedSolution(solution)}
                  className="flex items-center space-x-2 bg-green-600 hover:bg-green-700 px-4 py-2 rounded text-white text-sm transition-colors"
                >
                  <Code className="w-4 h-4" />
                  <span>Code Examples</span>
                </button>
              )}
            </div>
          </div>
        ))}
      </div>

      {/* Detailed Solution Modal */}
      {selectedSolution && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-gray-800 rounded-lg p-6 max-w-4xl max-h-screen overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-bold text-white">{selectedSolution.title}</h2>
              <button
                onClick={() => setSelectedSolution(null)}
                className="text-gray-400 hover:text-white"
              >
                ×
              </button>
            </div>
            
            <div className="space-y-6">
              <div>
                <h3 className="text-white font-semibold mb-2">Description</h3>
                <p className="text-gray-300">{selectedSolution.description}</p>
              </div>
              
              <div>
                <h3 className="text-white font-semibold mb-2">Implementation Steps</h3>
                <ol className="space-y-2">
                  {selectedSolution.steps.map((step, index) => (
                    <li key={index} className="text-gray-300 flex items-start">
                      <span className="text-blue-400 mr-2">{index + 1}.</span>
                      {step}
                    </li>
                  ))}
                </ol>
              </div>
              
              {selectedSolution.code_examples && (
                <div>
                  <h3 className="text-white font-semibold mb-2">Code Examples</h3>
                  <div className="space-y-4">
                    {selectedSolution.code_examples.map((example, index) => (
                      <div key={index} className="bg-gray-900 rounded p-4">
                        <pre className="text-green-400 text-sm overflow-x-auto">
                          <code>{example}</code>
                        </pre>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {selectedSolution.references && (
                <div>
                  <h3 className="text-white font-semibold mb-2">References</h3>
                  <ul className="space-y-1">
                    {selectedSolution.references.map((ref, index) => (
                      <li key={index}>
                        <a
                          href={ref}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-blue-400 hover:text-blue-300 text-sm flex items-center"
                        >
                          <ExternalLink className="w-4 h-4 mr-1" />
                          {ref}
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default VulnerabilitySolutions; 