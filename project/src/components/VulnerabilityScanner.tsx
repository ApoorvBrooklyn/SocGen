import React, { useState, useEffect } from 'react';
import { Search, Shield, AlertTriangle, CheckCircle, Clock, Settings, Play, Pause, RefreshCw, Download, Upload, Bot, Server, Eye, FileText, Zap, Filter } from 'lucide-react';

const VulnerabilityScanner = () => {
  const [selectedScanner, setSelectedScanner] = useState('openvas');
  const [scanStatus, setScanStatus] = useState('idle');
  const [scanResults, setScanResults] = useState([]);
  const [correlationResults, setCorrelationResults] = useState(null);
  const [selectedScan, setSelectedScan] = useState(null);
  const [filterSeverity, setFilterSeverity] = useState('all');
  const [isCorrelating, setIsCorrelating] = useState(false);

  const scanners = [
    {
      id: 'openvas',
      name: 'OpenVAS',
      version: '22.4.0',
      status: 'connected',
      lastScan: '2024-01-15 14:30',
      description: 'Open-source vulnerability assessment scanner',
      capabilities: ['Network Scanning', 'Web Application Testing', 'Authenticated Scans'],
      icon: Shield
    },
    {
      id: 'nessus',
      name: 'Nessus Professional',
      version: '10.6.4',
      status: 'connected',
      lastScan: '2024-01-15 12:15',
      description: 'Commercial vulnerability scanner by Tenable',
      capabilities: ['Compliance Auditing', 'Malware Detection', 'Configuration Auditing'],
      icon: Eye
    },
    {
      id: 'osquery',
      name: 'OSQuery',
      version: '5.10.2',
      status: 'running',
      lastScan: '2024-01-15 15:00',
      description: 'Operating system instrumentation framework',
      capabilities: ['System Monitoring', 'Endpoint Detection', 'Live Queries'],
      icon: Server
    }
  ];

  const mockScanResults = [
    {
      id: 'scan-001',
      scanner: 'openvas',
      target: '192.168.1.0/24',
      startTime: '2024-01-15T14:30:00Z',
      endTime: '2024-01-15T15:45:00Z',
      status: 'completed',
      totalHosts: 45,
      vulnerabilities: [
        {
          id: 'vuln-001',
          name: 'Apache HTTP Server Remote Code Execution',
          severity: 'Critical',
          cvss: 9.8,
          host: '192.168.1.10',
          port: 80,
          protocol: 'tcp',
          description: 'Remote code execution vulnerability in Apache HTTP Server',
          solution: 'Update Apache HTTP Server to version 2.4.59 or later',
          references: ['CVE-2024-0001'],
          firstFound: '2024-01-15T14:35:00Z',
          lastSeen: '2024-01-15T14:35:00Z',
          exploitAvailable: true,
          patchAvailable: true,
          riskScore: 95
        },
        {
          id: 'vuln-002',
          name: 'OpenSSL Buffer Overflow',
          severity: 'High',
          cvss: 8.1,
          host: '192.168.1.20',
          port: 443,
          protocol: 'tcp',
          description: 'Buffer overflow vulnerability in OpenSSL library',
          solution: 'Update OpenSSL to version 3.0.13 or later',
          references: ['CVE-2024-0002'],
          firstFound: '2024-01-15T14:40:00Z',
          lastSeen: '2024-01-15T14:40:00Z',
          exploitAvailable: false,
          patchAvailable: true,
          riskScore: 78
        },
        {
          id: 'vuln-003',
          name: 'Outdated Software Version',
          severity: 'Medium',
          cvss: 5.3,
          host: '192.168.1.30',
          port: 22,
          protocol: 'tcp',
          description: 'SSH service running outdated version',
          solution: 'Update SSH to latest version',
          references: ['CVE-2024-0010'],
          firstFound: '2024-01-15T14:45:00Z',
          lastSeen: '2024-01-15T14:45:00Z',
          exploitAvailable: false,
          patchAvailable: true,
          riskScore: 45
        }
      ]
    },
    {
      id: 'scan-002',
      scanner: 'nessus',
      target: 'Web Applications',
      startTime: '2024-01-15T12:15:00Z',
      endTime: '2024-01-15T13:30:00Z',
      status: 'completed',
      totalHosts: 12,
      vulnerabilities: [
        {
          id: 'vuln-004',
          name: 'SQL Injection Vulnerability',
          severity: 'High',
          cvss: 7.5,
          host: 'webapp.company.com',
          port: 443,
          protocol: 'https',
          description: 'SQL injection vulnerability in login form',
          solution: 'Implement parameterized queries and input validation',
          references: ['CWE-89'],
          firstFound: '2024-01-15T12:20:00Z',
          lastSeen: '2024-01-15T12:20:00Z',
          exploitAvailable: true,
          patchAvailable: false,
          riskScore: 82
        }
      ]
    }
  ];

  const llmCorrelationResults = {
    totalVulnerabilities: 4,
    criticalFindings: 1,
    highRiskFindings: 2,
    correlatedCVEs: 3,
    falsePositives: 0,
    newFindings: 2,
    prioritizedActions: [
      {
        priority: 1,
        action: 'Immediate patching of Apache HTTP Server on 192.168.1.10',
        reasoning: 'Critical vulnerability with public exploits available. High business impact due to customer-facing service.',
        cveId: 'CVE-2024-0001',
        affectedAssets: ['192.168.1.10'],
        estimatedEffort: '2 hours',
        businessImpact: 'High - Customer service disruption possible'
      },
      {
        priority: 2,
        action: 'Fix SQL injection vulnerability in web application',
        reasoning: 'High-severity vulnerability in customer-facing application. Exploit available but requires specific conditions.',
        cveId: 'N/A',
        affectedAssets: ['webapp.company.com'],
        estimatedEffort: '4 hours',
        businessImpact: 'High - Data breach risk'
      },
      {
        priority: 3,
        action: 'Update OpenSSL on affected systems',
        reasoning: 'High-severity vulnerability but no public exploits. Can be scheduled during maintenance window.',
        cveId: 'CVE-2024-0002',
        affectedAssets: ['192.168.1.20'],
        estimatedEffort: '1 hour',
        businessImpact: 'Medium - Secure communications at risk'
      }
    ],
    unpatched_software: [
      {
        software: 'Apache HTTP Server',
        currentVersion: '2.4.58',
        latestVersion: '2.4.59',
        affectedHosts: ['192.168.1.10'],
        securityImpact: 'Critical',
        updateCommand: 'sudo apt update && sudo apt install apache2=2.4.59-1ubuntu4.3'
      },
      {
        software: 'OpenSSL',
        currentVersion: '3.0.12',
        latestVersion: '3.0.13',
        affectedHosts: ['192.168.1.20'],
        securityImpact: 'High',
        updateCommand: 'sudo apt update && sudo apt install openssl=3.0.13-1'
      }
    ]
  };

  const handleStartScan = async (scannerType) => {
    setScanStatus('running');
    setScanResults([]);
    
    // Simulate scan progress
    setTimeout(() => {
      setScanResults(mockScanResults);
      setScanStatus('completed');
    }, 3000);
  };

  const handleCorrelateResults = async () => {
    setIsCorrelating(true);
    
    // Simulate LLM correlation
    setTimeout(() => {
      setCorrelationResults(llmCorrelationResults);
      setIsCorrelating(false);
    }, 2000);
  };

  const getSeverityColor = (severity) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return 'text-red-400 bg-red-900/20';
      case 'high':
        return 'text-amber-400 bg-amber-900/20';
      case 'medium':
        return 'text-yellow-400 bg-yellow-900/20';
      case 'low':
        return 'text-green-400 bg-green-900/20';
      default:
        return 'text-gray-400 bg-gray-900/20';
    }
  };

  const getStatusColor = (status) => {
    switch (status.toLowerCase()) {
      case 'connected':
      case 'running':
        return 'text-green-400';
      case 'disconnected':
        return 'text-red-400';
      case 'idle':
        return 'text-yellow-400';
      default:
        return 'text-gray-400';
    }
  };

  const filteredVulnerabilities = scanResults.flatMap(scan => 
    scan.vulnerabilities.filter(vuln => 
      filterSeverity === 'all' || vuln.severity.toLowerCase() === filterSeverity.toLowerCase()
    )
  );

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-3xl font-bold text-white mb-2">Vulnerability Scanner Integration</h2>
          <p className="text-gray-400">Automated scanning with LLM-powered correlation and analysis</p>
        </div>
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-2 text-sm text-gray-400">
            <Bot className="w-4 h-4" />
            <span>AI-Enhanced Correlation</span>
          </div>
          <button 
            onClick={() => handleCorrelateResults()}
            disabled={isCorrelating || scanResults.length === 0}
            className="px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 rounded-lg text-white text-sm font-medium transition-colors"
          >
            {isCorrelating ? 'Correlating...' : 'Correlate Results'}
          </button>
        </div>
      </div>

      {/* Scanner Status */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {scanners.map((scanner) => {
          const Icon = scanner.icon;
          return (
            <div 
              key={scanner.id}
              onClick={() => setSelectedScanner(scanner.id)}
              className={`bg-gray-800 rounded-xl p-6 border cursor-pointer transition-all ${
                selectedScanner === scanner.id 
                  ? 'border-blue-500 bg-blue-900/20' 
                  : 'border-gray-700 hover:border-gray-600'
              }`}
            >
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <Icon className="w-6 h-6 text-blue-400" />
                  <div>
                    <h3 className="text-lg font-semibold text-white">{scanner.name}</h3>
                    <p className="text-sm text-gray-400">v{scanner.version}</p>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <div className={`w-2 h-2 rounded-full ${getStatusColor(scanner.status) === 'text-green-400' ? 'bg-green-400' : getStatusColor(scanner.status) === 'text-red-400' ? 'bg-red-400' : 'bg-yellow-400'}`}></div>
                  <span className={`text-sm ${getStatusColor(scanner.status)}`}>{scanner.status}</span>
                </div>
              </div>
              
              <p className="text-gray-300 text-sm mb-4">{scanner.description}</p>
              
              <div className="space-y-2">
                <div className="text-xs text-gray-400">Last Scan: {scanner.lastScan}</div>
                <div className="flex flex-wrap gap-1">
                  {scanner.capabilities.map((cap, index) => (
                    <span key={index} className="text-xs bg-gray-700 text-gray-300 px-2 py-1 rounded">
                      {cap}
                    </span>
                  ))}
                </div>
              </div>
              
              <div className="mt-4 flex items-center space-x-2">
                <button 
                  onClick={(e) => {
                    e.stopPropagation();
                    handleStartScan(scanner.id);
                  }}
                  disabled={scanStatus === 'running'}
                  className="flex-1 px-3 py-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 rounded-lg text-white text-sm font-medium transition-colors flex items-center justify-center space-x-2"
                >
                  {scanStatus === 'running' && selectedScanner === scanner.id ? (
                    <>
                      <RefreshCw className="w-4 h-4 animate-spin" />
                      <span>Scanning...</span>
                    </>
                  ) : (
                    <>
                      <Play className="w-4 h-4" />
                      <span>Start Scan</span>
                    </>
                  )}
                </button>
                <button className="px-3 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg text-white text-sm transition-colors">
                  <Settings className="w-4 h-4" />
                </button>
              </div>
            </div>
          );
        })}
      </div>

      {/* Scan Results */}
      {scanResults.length > 0 && (
        <div className="bg-gray-800 rounded-xl border border-gray-700">
          <div className="p-6 border-b border-gray-700">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-xl font-semibold text-white mb-2">Scan Results</h3>
                <p className="text-gray-400 text-sm">
                  {scanResults.length} scan(s) completed • {filteredVulnerabilities.length} vulnerabilities found
                </p>
              </div>
              <div className="flex items-center space-x-4">
                <select
                  value={filterSeverity}
                  onChange={(e) => setFilterSeverity(e.target.value)}
                  className="px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white text-sm"
                >
                  <option value="all">All Severities</option>
                  <option value="critical">Critical</option>
                  <option value="high">High</option>
                  <option value="medium">Medium</option>
                  <option value="low">Low</option>
                </select>
                <button className="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-white text-sm font-medium transition-colors">
                  <Download className="w-4 h-4 mr-2" />
                  Export Results
                </button>
              </div>
            </div>
          </div>
          
          <div className="p-6">
            <div className="space-y-4">
              {filteredVulnerabilities.map((vuln) => (
                <div 
                  key={vuln.id}
                  className="bg-gray-700/50 rounded-lg p-4 border border-gray-600 hover:border-gray-500 transition-colors"
                >
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-3 mb-2">
                        <h4 className="text-white font-medium">{vuln.name}</h4>
                        <span className={`px-2 py-1 rounded text-xs font-medium ${getSeverityColor(vuln.severity)}`}>
                          {vuln.severity}
                        </span>
                        <span className="text-gray-400 text-xs">CVSS {vuln.cvss}</span>
                        {vuln.exploitAvailable && (
                          <span className="px-2 py-1 bg-red-900/20 text-red-400 text-xs rounded">
                            Exploit Available
                          </span>
                        )}
                        {vuln.patchAvailable && (
                          <span className="px-2 py-1 bg-green-900/20 text-green-400 text-xs rounded">
                            Patch Available
                          </span>
                        )}
                      </div>
                      
                      <p className="text-gray-300 text-sm mb-3">{vuln.description}</p>
                      
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                        <div>
                          <span className="text-gray-400">Host:</span>
                          <span className="text-white ml-2">{vuln.host}</span>
                        </div>
                        <div>
                          <span className="text-gray-400">Port:</span>
                          <span className="text-white ml-2">{vuln.port}/{vuln.protocol}</span>
                        </div>
                        <div>
                          <span className="text-gray-400">First Found:</span>
                          <span className="text-white ml-2">{new Date(vuln.firstFound).toLocaleString()}</span>
                        </div>
                        <div>
                          <span className="text-gray-400">Risk Score:</span>
                          <span className="text-white ml-2 font-medium">{vuln.riskScore}/100</span>
                        </div>
                      </div>
                      
                      <div className="mt-3 p-3 bg-gray-800 rounded-lg">
                        <div className="text-sm text-gray-400 mb-1">Recommended Solution:</div>
                        <div className="text-sm text-gray-300">{vuln.solution}</div>
                      </div>
                      
                      {vuln.references.length > 0 && (
                        <div className="mt-2 flex items-center space-x-2">
                          <span className="text-xs text-gray-400">References:</span>
                          {vuln.references.map((ref, index) => (
                            <span key={index} className="text-xs bg-gray-600 text-gray-300 px-2 py-1 rounded">
                              {ref}
                            </span>
                          ))}
                        </div>
                      )}
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <button className="px-3 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-white text-sm font-medium transition-colors">
                        Create Ticket
                      </button>
                      <button className="px-3 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg text-white text-sm transition-colors">
                        <Eye className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* LLM Correlation Results */}
      {correlationResults && (
        <div className="bg-gray-800 rounded-xl border border-gray-700">
          <div className="p-6 border-b border-gray-700">
            <div className="flex items-center space-x-2">
              <Bot className="w-6 h-6 text-blue-400" />
              <h3 className="text-xl font-semibold text-white">LLM Correlation Analysis</h3>
            </div>
            <p className="text-gray-400 text-sm mt-1">AI-powered vulnerability correlation and prioritization</p>
          </div>
          
          <div className="p-6">
            {/* Summary Stats */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
              <div className="bg-gray-700/50 p-4 rounded-lg">
                <div className="text-2xl font-bold text-white">{correlationResults.totalVulnerabilities}</div>
                <div className="text-sm text-gray-400">Total Vulnerabilities</div>
              </div>
              <div className="bg-gray-700/50 p-4 rounded-lg">
                <div className="text-2xl font-bold text-red-400">{correlationResults.criticalFindings}</div>
                <div className="text-sm text-gray-400">Critical Findings</div>
              </div>
              <div className="bg-gray-700/50 p-4 rounded-lg">
                <div className="text-2xl font-bold text-amber-400">{correlationResults.highRiskFindings}</div>
                <div className="text-sm text-gray-400">High Risk Findings</div>
              </div>
              <div className="bg-gray-700/50 p-4 rounded-lg">
                <div className="text-2xl font-bold text-green-400">{correlationResults.falsePositives}</div>
                <div className="text-sm text-gray-400">False Positives</div>
              </div>
            </div>

            {/* Prioritized Actions */}
            <div className="mb-6">
              <h4 className="text-lg font-semibold text-white mb-4">Prioritized Actions</h4>
              <div className="space-y-4">
                {correlationResults.prioritizedActions.map((action, index) => (
                  <div key={index} className="bg-gray-700/30 p-4 rounded-lg border border-gray-600">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center space-x-3 mb-2">
                          <span className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-bold ${
                            action.priority === 1 ? 'bg-red-600' : 
                            action.priority === 2 ? 'bg-amber-600' : 
                            'bg-yellow-600'
                          }`}>
                            {action.priority}
                          </span>
                          <h5 className="text-white font-medium">{action.action}</h5>
                          {action.cveId !== 'N/A' && (
                            <span className="text-blue-400 text-sm font-mono">{action.cveId}</span>
                          )}
                        </div>
                        
                        <p className="text-gray-300 text-sm mb-3">{action.reasoning}</p>
                        
                        <div className="grid grid-cols-2 md:grid-cols-3 gap-4 text-sm">
                          <div>
                            <span className="text-gray-400">Affected Assets:</span>
                            <div className="text-white mt-1">
                              {action.affectedAssets.map((asset, idx) => (
                                <div key={idx} className="text-xs bg-gray-600 text-gray-300 px-2 py-1 rounded mr-1 mb-1 inline-block">
                                  {asset}
                                </div>
                              ))}
                            </div>
                          </div>
                          <div>
                            <span className="text-gray-400">Estimated Effort:</span>
                            <span className="text-white ml-2">{action.estimatedEffort}</span>
                          </div>
                          <div>
                            <span className="text-gray-400">Business Impact:</span>
                            <span className="text-white ml-2">{action.businessImpact}</span>
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex items-center space-x-2">
                        <button className="px-3 py-2 bg-green-600 hover:bg-green-700 rounded-lg text-white text-sm font-medium transition-colors">
                          Create Ticket
                        </button>
                        <button className="px-3 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-white text-sm font-medium transition-colors">
                          Get Patch
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Unpatched Software */}
            <div>
              <h4 className="text-lg font-semibold text-white mb-4">Unpatched Software Detection</h4>
              <div className="space-y-3">
                {correlationResults.unpatched_software.map((software, index) => (
                  <div key={index} className="bg-gray-700/30 p-4 rounded-lg border border-gray-600">
                    <div className="flex items-center justify-between">
                      <div className="flex-1">
                        <div className="flex items-center space-x-3 mb-2">
                          <h5 className="text-white font-medium">{software.software}</h5>
                          <span className={`px-2 py-1 rounded text-xs font-medium ${getSeverityColor(software.securityImpact)}`}>
                            {software.securityImpact} Impact
                          </span>
                        </div>
                        
                        <div className="grid grid-cols-3 gap-4 text-sm mb-3">
                          <div>
                            <span className="text-gray-400">Current Version:</span>
                            <span className="text-white ml-2 font-mono">{software.currentVersion}</span>
                          </div>
                          <div>
                            <span className="text-gray-400">Latest Version:</span>
                            <span className="text-white ml-2 font-mono">{software.latestVersion}</span>
                          </div>
                          <div>
                            <span className="text-gray-400">Affected Hosts:</span>
                            <span className="text-white ml-2">{software.affectedHosts.length}</span>
                          </div>
                        </div>
                        
                        <div className="bg-gray-800 p-3 rounded font-mono text-sm text-green-400">
                          {software.updateCommand}
                        </div>
                      </div>
                      
                      <div className="flex items-center space-x-2">
                        <button className="px-3 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-white text-sm font-medium transition-colors">
                          Deploy Update
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityScanner; 