import React, { useState, useEffect } from 'react';
import { vulnAPI } from '../services/api';
import { AlertTriangle, CheckCircle, Clock, Shield, Zap, Eye, Target, RefreshCw } from 'lucide-react';

interface TestResult {
  test: string;
  status: 'success' | 'error' | 'pending';
  result?: any;
  error?: string;
}

interface VulnerabilityData {
  id: string;
  event_type: string;
  severity: string;
  description: string;
  payload?: string;
  source_ip?: string;
  created_at: string;
  cve_id?: string;
  exploit_success: boolean;
}

interface ThreatData {
  threat_id: string;
  threat_type: string;
  severity: string;
  description: string;
  payload?: string;
  target_endpoint: string;
  created_at: string;
  is_active: boolean;
}

const VulnerabilityTester: React.FC = () => {
  const [results, setResults] = useState<TestResult[]>([]);
  const [isRunning, setIsRunning] = useState(false);
  const [selectedTests, setSelectedTests] = useState<string[]>([]);
  const [vulnerabilities, setVulnerabilities] = useState<VulnerabilityData[]>([]);
  const [threats, setThreats] = useState<ThreatData[]>([]);
  const [serverStatus, setServerStatus] = useState<any>(null);
  const [isLoadingVulns, setIsLoadingVulns] = useState(false);

  // Load vulnerabilities and threats on component mount
  useEffect(() => {
    loadVulnerabilityData();
    const interval = setInterval(loadVulnerabilityData, 5000); // Refresh every 5 seconds
    return () => clearInterval(interval);
  }, []);

  const loadVulnerabilityData = async () => {
    try {
      setIsLoadingVulns(true);
      console.log('Loading vulnerability data...');
      
      // Load vulnerabilities
      console.log('Loading vulnerabilities...');
      const vulnData = await vulnAPI.getVulnerabilities();
      console.log('Vulnerability data:', vulnData);
      if (vulnData && vulnData.vulnerabilities) {
        setVulnerabilities(vulnData.vulnerabilities);
        console.log('Set vulnerabilities:', vulnData.vulnerabilities.length);
      }
      
      // Load active threats
      console.log('Loading threats...');
      const threatData = await vulnAPI.getActiveThreats();
      console.log('Threat data:', threatData);
      if (threatData && threatData.active_threats) {
        setThreats(threatData.active_threats);
        console.log('Set threats:', threatData.active_threats.length);
      }
      
      // Load server status
      console.log('Loading server status...');
      const statusData = await vulnAPI.getScanStatus();
      console.log('Status data:', statusData);
      if (statusData) {
        setServerStatus(statusData);
      }
      
    } catch (error) {
      console.error('Error loading vulnerability data:', error);
    } finally {
      setIsLoadingVulns(false);
    }
  };

  const testCases = [
    {
      id: 'info-disclosure',
      name: 'Information Disclosure',
      description: 'Test API endpoint that exposes sensitive user data',
      run: async () => {
        const data = await vulnAPI.getUsers();
        return { 
          exposedUsers: data.users?.length || 0, 
          data: data.users ? data.users.slice(0, 3) : [], // Show first 3 users
          recommendation: 'Remove sensitive data from API responses. Implement proper authentication and authorization.'
        };
      }
    },
    {
      id: 'sql-injection',
      name: 'SQL Injection',
      description: 'Test search functionality with SQL injection payloads',
      run: async () => {
        const payloads = [
          "' OR 1=1 --",
          "' UNION SELECT * FROM users --",
          "'; DROP TABLE posts; --"
        ];
        const results = [];
        for (const payload of payloads) {
          try {
            const result = await vulnAPI.search(payload);
            results.push({ 
              payload, 
              result: result.substring(0, 200) + '...',
              exploited: result.includes('user') || result.includes('admin')
            });
          } catch (error) {
            results.push({ payload, error: error.message });
          }
        }
        return {
          results,
          recommendation: 'Use parameterized queries instead of string concatenation. Implement input validation and sanitization.'
        };
      }
    },
    {
      id: 'xss',
      name: 'Cross-Site Scripting (XSS)',
      description: 'Test XSS vulnerabilities in posts and comments',
      run: async () => {
        const xssPayloads = [
          "<script>alert('XSS Test')</script>",
          "<img src=x onerror=alert('XSS')>",
          "<svg onload=alert('XSS')>"
        ];
        const results = [];
        for (const payload of xssPayloads) {
          try {
            await vulnAPI.addPost(`XSS Test - ${payload}`, payload);
            results.push({ payload, status: 'injected' });
          } catch (error) {
            results.push({ payload, error: error.message });
          }
        }
        return {
          results,
          recommendation: 'Implement proper output encoding and Content Security Policy (CSP) headers. Sanitize user input before displaying.'
        };
      }
    },
    {
      id: 'command-injection',
      name: 'Command Injection',
      description: 'Test ping functionality with command injection payloads',
      run: async () => {
        const payloads = [
          "localhost; ls -la",
          "localhost && whoami",
          "localhost | cat /etc/passwd"
        ];
        const results = [];
        for (const payload of payloads) {
          try {
            const result = await vulnAPI.ping(payload);
            results.push({ 
              payload, 
              result: result.substring(0, 200) + '...',
              exploited: result.includes('root') || result.includes('bin') || result.includes('etc')
            });
          } catch (error) {
            results.push({ payload, error: error.message });
          }
        }
        return {
          results,
          recommendation: 'Avoid executing shell commands with user input. Use safe alternatives or implement strict input validation.'
        };
      }
    },
    {
      id: 'path-traversal',
      name: 'Path Traversal',
      description: 'Test file access with path traversal payloads',
      run: async () => {
        const payloads = [
          "../../../etc/passwd",
          "/etc/passwd",
          "../../../etc/shadow"
        ];
        const results = [];
        for (const payload of payloads) {
          try {
            const result = await vulnAPI.readFile(payload);
            results.push({ 
              payload, 
              result: result.substring(0, 200) + '...',
              exploited: result.includes('root:') || result.includes('bin:')
            });
          } catch (error) {
            results.push({ payload, error: error.message });
          }
        }
        return {
          results,
          recommendation: 'Implement proper file path validation. Use a whitelist of allowed files and directories.'
        };
      }
    },
    {
      id: 'weak-auth',
      name: 'Weak Authentication',
      description: 'Test login with SQL injection and weak credentials',
      run: async () => {
        const testCases = [
          { username: "admin' --", password: "anything" },
          { username: "' OR 1=1 --", password: "anything" },
          { username: "admin", password: "admin' OR '1'='1" }
        ];
        const results = [];
        for (const testCase of testCases) {
          try {
            const result = await vulnAPI.login(testCase.username, testCase.password);
            results.push({ 
              testCase, 
              status: result.includes('Access Denied') ? 'failed' : 'success',
              result: result.substring(0, 200) + '...'
            });
          } catch (error) {
            results.push({ testCase, error: error.message });
          }
        }
        return {
          results,
          recommendation: 'Implement strong password policies, account lockout mechanisms, and multi-factor authentication.'
        };
      }
    },
    {
      id: 'idor',
      name: 'Insecure Direct Object References',
      description: 'Test admin panel access without proper authentication',
      run: async () => {
        try {
          const result = await vulnAPI.getAdminPanel();
          return {
            status: result.includes('Access Denied') ? 'protected' : 'vulnerable',
            result: result.substring(0, 200) + '...',
            recommendation: 'Implement proper access control and session management. Validate user permissions for each request.'
          };
        } catch (error) {
          return { error: error.message };
        }
      }
    },
    {
      id: 'generate-cve',
      name: 'Generate CVE from Threats',
      description: 'Generate a CVE record from active threats',
      run: async () => {
        try {
          const result = await vulnAPI.generateCVE();
          return {
            cve: result.cve,
            sourceThreat: result.source_threat,
            recommendation: 'Address the underlying vulnerability that generated this CVE. Apply appropriate patches and security measures.'
          };
        } catch (error) {
          return { error: error.message };
        }
      }
    },
    {
      id: 'exploit-test',
      name: 'Custom Exploit Test',
      description: 'Test custom exploit payload',
      run: async () => {
        try {
          const result = await vulnAPI.testExploit('Custom Test', '<script>alert("Custom XSS")</script>');
          return {
            success: result.success,
            threatId: result.threat_id,
            cveGenerated: result.cve_generated,
            recommendation: 'The system is vulnerable to custom exploits. Implement comprehensive input validation and security controls.'
          };
        } catch (error) {
          return { error: error.message };
        }
      }
    }
  ];

  const runTest = async (testCase: any) => {
    setResults(prev => prev.map(r => r.test === testCase.id ? { ...r, status: 'pending' } : r));
    
    try {
      const result = await testCase.run();
      setResults(prev => prev.map(r => 
        r.test === testCase.id ? { ...r, status: 'success', result } : r
      ));
    } catch (error) {
      setResults(prev => prev.map(r => 
        r.test === testCase.id ? { ...r, status: 'error', error: error.message } : r
      ));
    }
  };

  const runAllTests = async () => {
    setIsRunning(true);
    setResults(testCases.map(tc => ({ test: tc.id, status: 'pending' })));
    
    for (const testCase of testCases) {
      if (selectedTests.length === 0 || selectedTests.includes(testCase.id)) {
        await runTest(testCase);
        await new Promise(resolve => setTimeout(resolve, 1000)); // Delay between tests
      }
    }
    
    setIsRunning(false);
  };

  const clearResults = () => {
    setResults([]);
  };

  const toggleTest = (testId: string) => {
    setSelectedTests(prev => 
      prev.includes(testId) 
        ? prev.filter(id => id !== testId)
        : [...prev, testId]
    );
  };

  const getSeverityColor = (severity: string) => {
    switch (severity?.toLowerCase()) {
      case 'critical': return 'text-red-400 bg-red-900/20';
      case 'high': return 'text-orange-400 bg-orange-900/20';
      case 'medium': return 'text-yellow-400 bg-yellow-900/20';
      case 'low': return 'text-green-400 bg-green-900/20';
      default: return 'text-gray-400 bg-gray-900/20';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'success': return <CheckCircle className="w-4 h-4 text-green-400" />;
      case 'error': return <AlertTriangle className="w-4 h-4 text-red-400" />;
      case 'pending': return <Clock className="w-4 h-4 text-yellow-400" />;
      default: return null;
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-white">Vulnerability Tester</h1>
          <p className="text-gray-400">Test and analyze vulnerabilities in real-time</p>
        </div>
        <div className="flex items-center space-x-4">
          <button
            onClick={loadVulnerabilityData}
            disabled={isLoadingVulns}
            className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 px-4 py-2 rounded-lg text-white font-medium transition-colors"
          >
            <RefreshCw className={`w-4 h-4 ${isLoadingVulns ? 'animate-spin' : ''}`} />
            <span>Refresh Data</span>
          </button>
        </div>
      </div>

      {/* Server Status */}
      {serverStatus && (
        <div className="bg-gray-800 rounded-lg p-6">
          <h2 className="text-lg font-semibold text-white mb-4">Vulnerable Server Status</h2>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="bg-gray-700 rounded-lg p-4">
              <div className="flex items-center space-x-2">
                <Shield className="w-5 h-5 text-red-400" />
                <span className="text-gray-300">Status</span>
              </div>
              <span className={`text-lg font-bold ${serverStatus.status === 'vulnerable' ? 'text-red-400' : 'text-green-400'}`}>
                {serverStatus.status}
              </span>
            </div>
            <div className="bg-gray-700 rounded-lg p-4">
              <div className="flex items-center space-x-2">
                <AlertTriangle className="w-5 h-5 text-orange-400" />
                <span className="text-gray-300">Active Threats</span>
              </div>
              <span className="text-lg font-bold text-white">{serverStatus.active_threats}</span>
            </div>
            <div className="bg-gray-700 rounded-lg p-4">
              <div className="flex items-center space-x-2">
                <Eye className="w-5 h-5 text-blue-400" />
                <span className="text-gray-300">Vulnerabilities</span>
              </div>
              <span className="text-lg font-bold text-white">{serverStatus.vulnerabilities_found}</span>
            </div>
            <div className="bg-gray-700 rounded-lg p-4">
              <div className="flex items-center space-x-2">
                <Target className="w-5 h-5 text-purple-400" />
                <span className="text-gray-300">Risk Score</span>
              </div>
              <span className="text-lg font-bold text-white">{serverStatus.risk_score}/100</span>
            </div>
          </div>
        </div>
      )}

      {/* Real-time Vulnerabilities */}
      <div className="bg-gray-800 rounded-lg p-6">
        <h2 className="text-lg font-semibold text-white mb-4">Real-time Vulnerabilities</h2>
        <div className="max-h-64 overflow-y-auto">
          {vulnerabilities.length === 0 ? (
            <p className="text-gray-400">No vulnerabilities detected yet.</p>
          ) : (
            <div className="space-y-2">
              {vulnerabilities.slice(0, 10).map((vuln, index) => (
                <div key={index} className="bg-gray-700 rounded-lg p-3">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <span className={`px-2 py-1 rounded text-xs font-medium ${getSeverityColor(vuln.severity)}`}>
                        {vuln.severity}
                      </span>
                      <span className="text-white font-medium">{vuln.event_type}</span>
                    </div>
                    <span className="text-gray-400 text-sm">{new Date(vuln.created_at).toLocaleTimeString()}</span>
                  </div>
                  <p className="text-gray-300 text-sm mt-1">{vuln.description}</p>
                  {vuln.payload && (
                    <div className="mt-2 bg-gray-800 rounded p-2">
                      <span className="text-gray-400 text-xs">Payload:</span>
                      <code className="text-red-400 text-xs block">{vuln.payload}</code>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Active Threats */}
      <div className="bg-gray-800 rounded-lg p-6">
        <h2 className="text-lg font-semibold text-white mb-4">Active Threats</h2>
        <div className="max-h-64 overflow-y-auto">
          {threats.length === 0 ? (
            <p className="text-gray-400">No active threats detected.</p>
          ) : (
            <div className="space-y-2">
              {threats.slice(0, 10).map((threat, index) => (
                <div key={index} className="bg-gray-700 rounded-lg p-3">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <span className={`px-2 py-1 rounded text-xs font-medium ${getSeverityColor(threat.severity)}`}>
                        {threat.severity}
                      </span>
                      <span className="text-white font-medium">{threat.threat_type}</span>
                      <span className="text-green-400 text-xs">ACTIVE</span>
                    </div>
                    <span className="text-gray-400 text-sm">{new Date(threat.created_at).toLocaleTimeString()}</span>
                  </div>
                  <p className="text-gray-300 text-sm mt-1">{threat.description}</p>
                  <div className="mt-2 bg-gray-800 rounded p-2">
                    <span className="text-gray-400 text-xs">Endpoint:</span>
                    <code className="text-blue-400 text-xs block">{threat.target_endpoint}</code>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Test Configuration */}
      <div className="bg-gray-800 rounded-lg p-6">
        <h2 className="text-lg font-semibold text-white mb-4">Test Configuration</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
          {testCases.map((testCase) => (
            <div key={testCase.id} className="flex items-center space-x-3">
              <input
                type="checkbox"
                id={testCase.id}
                checked={selectedTests.includes(testCase.id)}
                onChange={() => toggleTest(testCase.id)}
                className="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500"
              />
              <label htmlFor={testCase.id} className="text-gray-300 cursor-pointer">
                {testCase.name}
              </label>
            </div>
          ))}
        </div>
        
        <div className="flex items-center space-x-4">
          <button
            onClick={runAllTests}
            disabled={isRunning}
            className="bg-red-600 hover:bg-red-700 disabled:bg-gray-600 px-6 py-2 rounded-lg text-white font-medium flex items-center space-x-2 transition-colors"
          >
            <Zap className="w-4 h-4" />
            <span>{isRunning ? 'Running Tests...' : 'Run Selected Tests'}</span>
          </button>
          
          <button
            onClick={clearResults}
            className="bg-gray-600 hover:bg-gray-700 px-6 py-2 rounded-lg text-white font-medium transition-colors"
          >
            Clear Results
          </button>
          
          <button
            onClick={() => setSelectedTests(testCases.map(tc => tc.id))}
            className="bg-blue-600 hover:bg-blue-700 px-6 py-2 rounded-lg text-white font-medium transition-colors"
          >
            Select All
          </button>
        </div>
      </div>

      {/* Test Results */}
      {results.length > 0 && (
        <div className="bg-gray-800 rounded-lg p-6">
          <h2 className="text-lg font-semibold text-white mb-4">Test Results</h2>
          <div className="space-y-4">
            {results.map((result, index) => {
              const testCase = testCases.find(tc => tc.id === result.test);
              return (
                <div key={index} className="bg-gray-700 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center space-x-3">
                      {getStatusIcon(result.status)}
                      <span className="text-white font-medium">{testCase?.name}</span>
                    </div>
                    <span className={`px-2 py-1 rounded text-xs font-medium ${
                      result.status === 'success' ? 'bg-green-900/20 text-green-400' :
                      result.status === 'error' ? 'bg-red-900/20 text-red-400' :
                      'bg-yellow-900/20 text-yellow-400'
                    }`}>
                      {result.status}
                    </span>
                  </div>
                  
                  <p className="text-gray-300 text-sm mb-3">{testCase?.description}</p>
                  
                  {result.error && (
                    <div className="bg-red-900/20 border border-red-700 rounded p-3 mb-3">
                      <span className="text-red-400 text-sm">{result.error}</span>
                    </div>
                  )}
                  
                  {result.result && (
                    <div className="space-y-3">
                      <div className="bg-gray-800 rounded p-3">
                        <pre className="text-gray-300 text-sm whitespace-pre-wrap overflow-x-auto">
                          {JSON.stringify(result.result, null, 2)}
                        </pre>
                      </div>
                      
                      {result.result.recommendation && (
                        <div className="bg-blue-900/20 border border-blue-700 rounded p-3">
                          <div className="flex items-start space-x-2">
                            <Shield className="w-4 h-4 text-blue-400 mt-0.5" />
                            <div>
                              <span className="text-blue-400 font-medium text-sm">Recommendation:</span>
                              <p className="text-blue-300 text-sm mt-1">{result.result.recommendation}</p>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityTester; 